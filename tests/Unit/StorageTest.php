<?php

namespace Tests\Unit;

use App\Media\Storage\Storage;
use App\Models\Settings;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class StorageTest extends TestCase
{
    use RefreshDatabase;

    protected bool $seed = true;

    private Storage $storage;

    private string $firstuuid;

    private string $seconduuid;

    private \VirtualFileSystem\FileSystem $vfs;

    private static function baseVfs(): \VirtualFileSystem\FileSystem
    {
        $vfs = new \VirtualFileSystem\FileSystem;
        $vfs->createDirectory('/storage1/testfolder', true);
        $vfs->createDirectory('/storage2');
        $vfs->createFile('/storage1/testfolder/test.txt', '');
        $vfs->createFile('/storage2/test2.txt', '');

        return $vfs;
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->vfs = self::baseVfs();

        // add some default settings to the database for these tests
        $this->firstuuid = Settings::addScannerDir([
            'driver' => 'local',
            'root' => $this->vfs->path('storage1'),
        ]);

        $this->seconduuid = Settings::addScannerDir([
            'driver' => 'local',
            'root' => $this->vfs->path('storage2'),
        ]);

        $this->storage = $this->app->make(Storage::class, ['handlers' => []]);
    }

    /**
     * A basic unit test example.
     */
    public function test_storage_drivers(): void
    {
        $firstfile = $this->firstuuid.'://testfolder/test.txt';
        $secondfile = $this->seconduuid.'://test2.txt';

        $this->assertNotNull($this->storage->storage($firstfile));
        $this->assertNotNull($this->storage->storage($secondfile));

        $this->assertEquals('testfolder/test.txt', Storage::path($firstfile));
        $this->assertEquals('test2.txt', Storage::path($secondfile));
    }

    public function test_storage_protocol(): void
    {
        $this->expectException(\InvalidArgumentException::class);

        $this->storage->storage('google.es');
    }

    public function test_storage_path(): void
    {
        $this->expectException(\InvalidArgumentException::class);

        $this->storage->path('protocol://');
    }
}
